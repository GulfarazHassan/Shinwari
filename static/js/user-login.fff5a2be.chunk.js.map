{"version":3,"sources":["views/user/login.js"],"names":["withRouter","history","loading","error","loginUserAction","useState","email","setEmail","password","setPassword","loading1","setLoading","useEffect","check","a","reactLocalStorage","get","user","console","log","push","onUserLogin","ApiManager","signIn","then","result","no_result","data","alert","message","token","decoded","jwtDecode","user_data","JSON","stringify","set","initialValues","className","xxs","md","onSubmit","errors","touched","id","name","value","onChange","e","target","type","to","disabled","color","size"],"mappings":"sUA4MeA,sBAvKD,EAAGC,UAASC,UAASC,QAAOC,sBAAuB,IAAD,EACpCC,mBAAS,IAD2B,mBACvDC,EADuD,KAChDC,EADgD,OAE9BF,mBAAS,IAFqB,mBAEvDG,EAFuD,KAE7CC,EAF6C,OAG/BJ,oBAAS,GAHsB,mBAGvDK,EAHuD,KAG7CC,EAH6C,KAK9DC,oBAAU,KACRC,MAGF,IAAMA,EAAK,uCAAG,4BAAAC,EAAA,sEACKC,oBAAkBC,IAAI,QAD3B,UAEC,UADTC,EADQ,+BAGVC,QAAQC,IAAI,cAAeF,GAHjB,kBAIHhB,EAAQmB,KAAK,eAJV,2CAAH,qDAQLC,EAAW,uCAAG,sBAAAP,EAAA,6DAClBH,GAAW,GADO,UAGZ,IAAIW,KAAaC,OAAOjB,EAAOE,GAAUgB,KAAMC,IACnD,GAAIA,EAAOC,UACTf,GAAW,QAGb,GAAIc,EAAOE,KAAM,CACf,GAAIF,EAAOE,KAAKxB,MAGd,OAFAyB,MAAMH,EAAOE,KAAKxB,YAClBQ,GAAW,GAIb,GAAIc,EAAOE,KAAM,CACf,GAAIF,EAAOE,KAAKE,QAEd,OADAlB,GAAW,GACJiB,MAAM,yCAHA,IAKPE,EAAUL,EAAOE,KAAjBG,MACJC,EAAUC,YAAUF,GACpBG,EAAYC,KAAKC,UAAUJ,GAC/BhB,oBAAkBqB,IAAI,QAAQ,GAC9BrB,oBAAkBqB,IAAI,YAAaH,GACnClB,oBAAkBqB,IAAI,QAASN,GAE/B7B,EAAQmB,KAAK,cAGfF,QAAQC,IAAI,yBAA0BM,MA9BxB,2CAAH,qDAuDXY,EAAgB,CAAE/B,QAAOE,YAE/B,OACE,kBAAC,IAAD,CAAK8B,UAAU,SACb,kBAAC,IAAD,CAAOC,IAAI,KAAKC,GAAG,KAAKF,UAAU,mBAChC,kBAAC,IAAD,CAAMA,UAAU,aACd,yBAAKA,UAAU,iCACb,uBAAGA,UAAU,iBAAb,uBACA,uBAAGA,UAAU,cAAb,wCAEE,+BAQJ,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAWA,UAAU,QAArB,eAEA,6BACA,6BAKA,kBAAC,IAAD,CAAQD,cAAeA,EAAeI,SAAUpB,GAC7C,EAAGqB,SAAQC,aACV,kBAAC,IAAD,CAAML,UAAU,mCACd,kBAAC,IAAD,CAAWA,UAAU,8BACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAcM,GAAG,gBAEnB,kBAAC,IAAD,CACEN,UAAU,eACVO,KAAK,QACLC,MAAOxC,EACPyC,SAAWC,GAAMzC,EAASyC,EAAEC,OAAOH,UAQvC,kBAAC,IAAD,CAAWR,UAAU,8BACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAcM,GAAG,mBAEnB,kBAAC,IAAD,CACEN,UAAU,eACVY,KAAK,WACLL,KAAK,WACLC,MAAOtC,EACPuC,SAAWC,GAAMvC,EAAYuC,EAAEC,OAAOH,UAQ1C,yBAAKR,UAAU,qDACb,kBAAC,IAAD,CAASa,GAAG,cACV,kBAAC,IAAD,CAAcP,GAAG,eAEnB,kBAAC,IAAD,CACEQ,SAAU1C,EACV2C,MAAM,UACNf,UAAS,wCACP5B,EAAW,eAAiB,IAE9B4C,KAAK,MAEL,0BAAMhB,UAAU,0BACd,0BAAMA,UAAU,YAChB,0BAAMA,UAAU,YAChB,0BAAMA,UAAU,aAElB,0BAAMA,UAAU,SACd,kBAAC,IAAD,CAAcM,GAAG","file":"static/js/user-login.fff5a2be.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\nimport { Route, withRouter, Switch, Redirect, NavLink } from 'react-router-dom';\n\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { reactLocalStorage } from 'reactjs-localstorage';\n\nimport { Formik, Form, Field } from 'formik';\nimport { NotificationManager } from '../../components/common/react-notifications';\n\nimport { loginUser } from '../../redux/actions';\nimport { Colxx } from '../../components/common/CustomBootstrap';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport ApiManager from '../../helpers/ApiManger';\nimport jwtDecode from 'jwt-decode';\n\nconst validatePassword = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your password';\n  } else if (value.length < 4) {\n    error = 'Value must be longer than 3 characters';\n  }\n  return error;\n};\n\nconst validateEmail = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your email address';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    error = 'Invalid email address';\n  }\n  return error;\n};\n\nconst Login = ({ history, loading, error, loginUserAction }) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading1, setLoading] = useState(false);\n\n  useEffect(() => {\n    check();\n  });\n\n  const check = async () => {\n    let user = await reactLocalStorage.get('user');\n    if (user === 'true') {\n      console.log('uusserr :: ', user);\n      return history.push('/dashboard');\n    }\n  };\n\n  const onUserLogin = async () => {\n    setLoading(true);\n\n    await new ApiManager().signIn(email, password).then((result) => {\n      if (result.no_result) {\n        setLoading(false);\n        return;\n      }\n      if (result.data) {\n        if (result.data.error) {\n          alert(result.data.error);\n          setLoading(false);\n          return;\n        }\n\n        if (result.data) {\n          if (result.data.message) {\n            setLoading(false);\n            return alert('Please check your email and password!');\n          }\n          const { token } = result.data;\n          var decoded = jwtDecode(token);\n          let user_data = JSON.stringify(decoded);\n          reactLocalStorage.set('user', true);\n          reactLocalStorage.set('user_data', user_data);\n          reactLocalStorage.set('token', token);\n\n          history.push('/dashboard');\n        }\n\n        console.log('result after adding>>>', result);\n      }\n    });\n    // await axios\n    //   .post('https://marrage-backend.herokuapp.com/api/v1/auth/login', {\n    //     email: email,\n    //     password: password,\n    //   })\n    //   .then(async (res) => {\n    //     await reactLocalStorage.set('user', true);\n    //     history.push('/');\n    //   })\n    //   .catch((e) => {\n    //     setLoading(false);\n    //     NotificationManager.warning(\n    //       error,\n    //       'Email/Password incorrect',\n    //       3000,\n    //       null,\n    //       null,\n    //       ''\n    //     );\n    //   });\n  };\n\n  const initialValues = { email, password };\n\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n        <Card className=\"auth-card\">\n          <div className=\"position-relative image-side \">\n            <p className=\"text-white h2\">SHINWARI ENTERPRISE</p>\n            <p className=\"white mb-0\">\n              Please use your credentials to login.\n              <br />\n              {/* If you are not a member, please{' '}\n              <NavLink to=\"/user/register\" className=\"white\">\n                register\n              </NavLink>\n              . */}\n            </p>\n          </div>\n          <div className=\"form-side\">\n            <CardTitle className=\"mb-4\">Admin Login</CardTitle>\n\n            <br />\n            <br />\n            {/* <CardTitle className=\"mb-4\">\n              <IntlMessages id=\"user.appname\" />\n            </CardTitle> */}\n\n            <Formik initialValues={initialValues} onSubmit={onUserLogin}>\n              {({ errors, touched }) => (\n                <Form className=\"av-tooltip tooltip-label-bottom\">\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.email\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      name=\"email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                    />\n                    {/* {errors.email && touched.email && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.email}\n                      </div>\n                    )} */}\n                  </FormGroup>\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.password\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      type=\"password\"\n                      name=\"password\"\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                    />\n                    {/* {errors.password && touched.password && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.password}\n                      </div>\n                    )} */}\n                  </FormGroup>\n                  <div className=\"d-flex justify-content-between align-items-center\">\n                    <NavLink to=\"/dashboard\">\n                      <IntlMessages id=\"Dashboard\" />\n                    </NavLink>\n                    <Button\n                      disabled={loading1}\n                      color=\"primary\"\n                      className={`btn-shadow btn-multiple-state ${\n                        loading1 ? 'show-spinner' : ''\n                      }`}\n                      size=\"lg\"\n                    >\n                      <span className=\"spinner d-inline-block\">\n                        <span className=\"bounce1\" />\n                        <span className=\"bounce2\" />\n                        <span className=\"bounce3\" />\n                      </span>\n                      <span className=\"label\">\n                        <IntlMessages id=\"user.login-button\" />\n                      </span>\n                    </Button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\n\nexport default withRouter(Login);\n"],"sourceRoot":""}