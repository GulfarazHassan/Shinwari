{"version":3,"sources":["views/app/pages/profile/portfolio.js"],"names":["productData","slice","withRouter","props","useState","activeTab","setActiveTab","modalOpen","setModalOpen","userData","userId","usersData","Boolean","modal","setModal","loadingUser","useEffect","check","toggle","isOpen","color","onClick","ModalExample","xxs","userName","className","tabs","classnames","active","location","to","tabId","lg","outline","thumb","profileImage","large","aboutMe","undefined","creditCard","emailVerify","facebook","twitter","instagram","style","padding","paddingLeft","paddingRight","textAlign","animation","role","map","itemData","marginTop","rounded","small","src","alt","paddingTop","marginBottom","id"],"mappings":"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","file":"static/js/profile-portfolio.999c959b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { reactLocalStorage } from 'reactjs-localstorage';\nimport ThumbnailImage from './../../../../components/cards/ThumbnailImage';\n\nimport {\n  Row,\n  Col,\n  Card,\n  CardBody,\n  Nav,\n  NavItem,\n  Button,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownItem,\n  DropdownMenu,\n  TabContent,\n  Spinner,\n  TabPane,\n  Badge,\n  CardTitle,\n  CardSubtitle,\n  CardText,\n  CardImg,\n} from 'reactstrap';\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nimport { NavLink, withRouter } from 'react-router-dom';\nimport AddNewModal from '../../../../containers/pages/AddNewModal';\nimport classnames from 'classnames';\nimport Breadcrumb from '../../../../containers/navs/Breadcrumb';\nimport { Colxx } from '../../../../components/common/CustomBootstrap';\nimport IntlMessages from '../../../../helpers/IntlMessages';\nimport SingleLightbox from '../../../../components/pages/SingleLightbox';\nimport recentPostsData from '../../../../data/recentposts';\nimport RecentPost from '../../../../components/common/RecentPost';\nimport productData from '../../../../data/products';\nimport UserCardBasic from '../../../../components/cards/UserCardBasic';\nimport friendsData from '../../../../data/follow';\n// import ReactSelect from \"../../../../containers/forms/ReactSelectExample\";\n// import ReactSelect2 from \"../../../../containers/forms/ReactSelectExample2\";\nimport BlogList from './../blog/blog-list-profile';\nimport ApiManager from '../../../../helpers/ApiManger';\nimport Chat from './../../applications/chat';\n\nconst products = productData.slice(0, 15);\nconst categories = [\n  { label: 'Cakes', value: 'Cakes', key: 0 },\n  { label: 'Cupcakes', value: 'Cupcakes', key: 1 },\n  { label: 'Desserts', value: 'Desserts', key: 2 },\n];\n\nconst ProfilePortfolio = (props) => {\n  const [activeTab, setActiveTab] = useState('details');\n  const [modalOpen, setModalOpen] = useState(false);\n  const [userData, setUserData] = useState({});\n  const [userId, setUserId] = useState('');\n  const [userName, setUserName] = useState('');\n  const [userImage, setUserImage] = useState('');\n  const [image, setImage] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [aboutMe, setAboutMe] = useState('');\n  const [location, setLocation] = useState('');\n  const [creditCard, setCreditCard] = useState(false);\n  const [emailVerify, setEmailVerify] = useState(false);\n\n  const [usersData, setUsersData] = useState([]);\n\n  const [read, setRead] = useState(Boolean);\n\n  const [chatUsers, setChatUsers] = useState([]);\n\n  const [modal, setModal] = useState(false);\n\n  const [loadingUser, setloadingUser] = useState(true);\n\n  useEffect(() => {\n    check();\n  }, []);\n\n  const check = () => {\n    // let user = reactLocalStorage.get('user_data');\n    // user = JSON.parse(user);\n    // console.log('user>>>>', user);\n    // setUserId(user.userId);\n    // setUserName(user.namef);\n    // setUserImage(user.profileImage);\n    // getUser(user.userId);\n    // getFollowers(user.userId);\n    // getFollowing(user.userId);\n    // getAllUsers(user.userId);\n    // getChatUsers(user.userId);\n  };\n\n  // const getAllUsers = (id) => {\n  //   new ApiManager().getUsers(id).then((result) => {\n  //     if (result.no_result) {\n  //       return;\n  //     }\n  //     if (result.data) {\n  //       if (result.data.error) {\n  //         alert(result.data.error);\n  //         return;\n  //       }\n  //       if (result.data) {\n  //         let arr = result.data.list;\n  //         arr = arr.filter((obj) => obj._id != id);\n  //         setUsersData(arr);\n  //         setloadingUser(false);\n  //       }\n  //       console.log('result user data>>>', result);\n  //     }\n  //   });\n  // };\n\n  // const getUser = (id) => {\n  //   new ApiManager().userById(id).then((result) => {\n  //     if (result.no_result) {\n  //       return;\n  //     }\n  //     if (result.data) {\n  //       if (result.data.error) {\n  //         alert(result.data.error);\n  //         return;\n  //       }\n  //       if (result.data) {\n  //         setUserData(result.data);\n  //         let data = {\n  //           namef: result.data.userName,\n  //           role: result.data.userRole,\n  //           userEmail: result.data.userEmail,\n  //           userId: result.data._id,\n  //           profileImage: result.data.profileImage,\n  //         };\n  //         let user_data = JSON.stringify(data);\n  //         reactLocalStorage.set('user_data', user_data);\n  //       }\n  //       console.log('result user data>>>', result);\n  //     }\n  //   });\n  // };\n\n  const ModalExample = (props) => {\n    const toggle = () => setModal(!modal);\n    return (\n      <div>\n        <Modal isOpen={modal} toggle={toggle}>\n          <ModalHeader toggle={toggle}>Subscribe</ModalHeader>\n          <ModalBody>\n            This is dummy text later on will be add real body text...\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"secondary\" onClick={toggle}>\n              Cancel\n            </Button>\n            <Button\n              color=\"primary\"\n              onClick={() => {\n                setModal(false);\n                // followAdd();\n              }}\n            >\n              Subscribe\n            </Button>{' '}\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  };\n\n  // const getChatUsers = (id) => {\n  //   new ApiManager().getChatUsers(id).then((result) => {\n  //     if (result.no_result) {\n  //       return;\n  //     }\n  //     if (result.data) {\n  //       if (result.data.error) {\n  //         alert(result.data.error);\n  //         return;\n  //       }\n  //       if (result.data) {\n  //         setChatUsers(result.data);\n  //         console.log(\"result getting chat  data>>>\", result.data);\n  //       }\n  //       console.log(\"getting chat user>>>\", result);\n  //     }\n  //   });\n  // };\n\n  return (\n    <>\n      {/* <AddNewModal\n        modalOpen={modalOpen}\n        toggleModal={() => setModalOpen(!modalOpen)}\n        categories={categories}\n        // getUser={getUser}\n      /> */}\n\n      {ModalExample()}\n      <Row>\n        <Colxx xxs=\"12\">\n          <h1>{userData.userName}</h1>\n\n          <div className=\"text-zero top-right-button-container\">\n            <UncontrolledDropdown>\n              {/* <Button\n                outline\n                color=\"primary\"\n                onClick={() => setModalOpen(!modalOpen)}\n              >\n                primary\n              </Button> */}\n            </UncontrolledDropdown>\n          </div>\n\n          <Nav tabs className=\"separator-tabs ml-0 mb-5\">\n            <NavItem>\n              <NavLink\n                className={classnames({\n                  active: activeTab === 'details',\n                  'nav-link': true,\n                })}\n                onClick={() => {\n                  setActiveTab('details');\n                }}\n                location={{}}\n                to=\"#\"\n              >\n                Profile\n              </NavLink>\n            </NavItem>\n          </Nav>\n\n          <TabContent activeTab={activeTab}>\n            <TabPane tabId=\"details\">\n              <Row>\n                <Colxx xxs=\"12\" lg=\"4\" className=\"mb-4 col-left\">\n                  <Card className=\"mb-4\">\n                    <div className=\"position-absolute card-top-buttons\">\n                      <Button\n                        outline\n                        color=\"primary\"\n                        className=\"icon-button\"\n                        onClick={() => setModalOpen(!modalOpen)}\n                      >\n                        <i className=\"simple-icon-pencil\" />\n                      </Button>\n                    </div>\n                    <SingleLightbox\n                      thumb={\n                        userData.profileImage\n                          ? userData.profileImage\n                          : '/assets/img/profiles/profile.png'\n                      }\n                      large={\n                        userData.profileImage\n                          ? userData.profileImage\n                          : '/assets/img/profiles/prfoile.png'\n                      }\n                      className=\"card-img-top\"\n                    />\n\n                    <CardBody>\n                      <p className=\"text-muted text-small mb-2\">About</p>\n                      <p className=\"mb-3\">\n                        {userData.aboutMe ? userData.aboutMe : undefined}{' '}\n                      </p>\n                      <p className=\"text-muted text-small mb-2\">Location</p>\n                      <p className=\"mb-3\">\n                        {userData.location ? userData.location : undefined}\n                      </p>\n\n                      <br />\n                      <p className=\"text-muted text-small mb-2\">Credit Card</p>\n                      <p className=\"mb-3\">\n                        {userData.creditCard\n                          ? 'Credit Card Verified'\n                          : 'Credit Card not verified yet'}\n                      </p>\n                      <p className=\"text-muted text-small mb-2\">Email</p>\n                      <p className=\"mb-3\">\n                        {userData.emailVerify\n                          ? 'Email Verified'\n                          : 'Email not verified yet'}\n                      </p>\n                      <br />\n                      <p className=\"text-muted text-small mb-2\">Contacts</p>\n                      <div className=\"social-icons\">\n                        <ul className=\"list-unstyled list-inline\">\n                          <li className=\"list-inline-item\">\n                            <NavLink\n                              to={userData.facebook ? userData.facebook : '#'}\n                              location={{}}\n                            >\n                              <i className=\"simple-icon-social-facebook\" />\n                            </NavLink>\n                          </li>\n                          <li className=\"list-inline-item\">\n                            <NavLink\n                              to={userData.twitter ? userData.twitter : '#'}\n                              location={{}}\n                            >\n                              <i className=\"simple-icon-social-twitter\" />\n                            </NavLink>\n                          </li>\n                          <li className=\"list-inline-item\">\n                            <NavLink\n                              to={userData.instagram ? userData.instagram : '#'}\n                              location={{}}\n                            >\n                              <i className=\"simple-icon-social-instagram\" />\n                            </NavLink>\n                          </li>\n                        </ul>\n                      </div>\n                    </CardBody>\n                  </Card>\n\n                  <Card\n                    style={{\n                      padding: '20px',\n                      paddingLeft: '30px',\n                      paddingRight: '30px',\n                    }}\n                  >\n                    <br />\n                    <h3>Who to Follow</h3>\n                    <TabPane tabId=\"followers\">\n                      {loadingUser ? (\n                        <div\n                          style={{\n                            textAlign: 'center',\n                          }}\n                        >\n                          <Spinner\n                            color=\"primary\"\n                            animation=\"border\"\n                            role=\"status\"\n                          >\n                            <span className=\"sr-only\">Loading...</span>\n                          </Spinner>\n                        </div>\n                      ) : (\n                        usersData &&\n                        usersData.map((itemData) => {\n                          return (\n                            <Card\n                              style={{\n                                padding: '10px',\n                                paddingLeft: '20px',\n                                paddingRight: '20px',\n                                marginTop: '20px',\n                              }}\n                              className=\"\"\n                            >\n                              <Row>\n                                <Col>\n                                  <ThumbnailImage\n                                    rounded\n                                    small\n                                    src={itemData.profileImage}\n                                    alt=\"profile\"\n                                  />\n                                </Col>\n                                <Col style={{ paddingTop: '15px' }}>\n                                  <CardSubtitle\n                                    className=\"\"\n                                    style={{ marginBottom: '0px' }}\n                                  >\n                                    {itemData.userName}\n                                  </CardSubtitle>\n                                  <CardText className=\"text-muted text-small mb-2\">\n                                    {itemData.location}\n                                  </CardText>\n                                </Col>\n                                <Col>\n                                  <div>\n                                    <NavLink\n                                      style={{\n                                        marginTop: '20px',\n                                      }}\n                                      className=\"btn btn-outline-primary btn-xs\"\n                                      to=\"#\"\n                                      onClick={() => {\n                                        setModal(true);\n                                        // setFollowerId(itemData._id);\n                                        // setFollowerName(itemData.userName);\n                                        // setFollowerImage(itemData.profileImage);\n                                        // after modal this will call\n                                        // followAdd(\n                                        //   itemData._id,\n                                        //   itemData.userName,\n                                        //   itemData.profileImage\n                                        // );\n                                      }}\n                                      color=\"primary\"\n                                      location={{}}\n                                    >\n                                      <IntlMessages id=\"follow\" />\n                                    </NavLink>\n                                  </div>\n                                </Col>\n                              </Row>\n                            </Card>\n                          );\n                        })\n                      )}\n                    </TabPane>\n                  </Card>\n                  {/* \n                  <Card className=\"mb-4\">\n                    <CardBody>\n                      <CardTitle>\n                        <IntlMessages id=\"pages.recent-posts\" />\n                      </CardTitle>\n                      <div className=\"remove-last-border remove-last-margin remove-last-padding\">\n                        {recentPostsData.map((itemData) => {\n                          return (\n                            <RecentPost\n                              data={itemData}\n                              key={`recent_${itemData.key}`}\n                            />\n                          );\n                        })}\n                      </div>\n                    </CardBody>\n                  </Card> */}\n                </Colxx>\n\n                <Colxx xxs=\"12\" lg=\"8\" className=\"mb-4 col-right\">\n                  <Card>\n                    <CardBody>\n                      <BlogList userId={userId} />\n                    </CardBody>\n                  </Card>\n                </Colxx>\n              </Row>\n            </TabPane>\n          </TabContent>\n        </Colxx>\n      </Row>\n    </>\n  );\n};\nexport default withRouter(ProfilePortfolio);\n"],"sourceRoot":""}